from sklearn.base import BaseEstimator, RegressorMixin
from sklearn.utils.validation import check_X_y, check_array, check_is_fitted

class BaseBRNode:
    def __init__(self):
        self.left = None
        self.right = None
        self.feature_index = None
        self.split_value = None
        self.is_leaf = False
        self.leaf_value = None

# BaseBRTree クラスの定義
class BaseBRTree(BaseEstimator):
    def __init__(self, p1=0.5, p2=0.5):
        self.root = BaseBRNode()
        self.p1 = p1  # Probability for selecting a feature
        self.p2 = p2  # Probability for selecting a split point

    def _select_feature(self, X):
        n_features = X.shape[1]
        if np.random.rand() < self.p1:
            return np.random.randint(0, n_features)
        else:
            return np.random.choice(np.arange(0, n_features), size=int(np.sqrt(n_features)), replace=False)

    def _select_split_point(self, X, feature_index):
        feature_values = X[:, feature_index]
        unique_values = np.unique(feature_values)
        if np.random.rand() < self.p2:
            return np.random.choice(unique_values)
        else:
            return np.median(unique_values)

    def _split_data(self, X, y, feature_index, split_value):
        left_mask = X[:, feature_index] < split_value
        right_mask = ~left_mask
        if len(y.shape) == 1:
            return X[left_mask], y[left_mask], X[right_mask], y[right_mask]
        else:
            return X[left_mask], y[left_mask, :], X[right_mask], y[right_mask, :]

# BRTreeRegressor クラスの定義
class BRTreeRegressor(BaseBRTree, RegressorMixin):
    def __init__(self, p1=0.5, p2=0.5, min_samples_split=2):
        super().__init__(p1, p2)
        self.min_samples_split = min_samples_split

    def _fit_node(self, X, y, node):
        n_samples, n_features = X.shape
        if n_samples <= self.min_samples_split:
            node.is_leaf = True
            node.leaf_value = np.mean(y)
            return

        feature_index = self._select_feature(X)
        split_value = self._select_split_point(X, feature_index)
        X_left, y_left, X_right, y_right = self._split_data(X, y, feature_index, split_value)

        if len(X_left) == 0 or len(X_right) == 0:
            node.is_leaf = True
            node.leaf_value = np.mean(y)
            return

        node.feature_index = feature_index
        node.split_value = split_value
        node.left = BaseBRNode()
        node.right = BaseBRNode()
        self._fit_node(X_left, y_left, node.left)
        self._fit_node(X_right, y_right, node.right)

    def fit(self, X, y):
        X, y = check_X_y(X, y)
        self._fit_node(X, y, self.root)
        self.is_fitted_ = True  # フィット済みフラグを設定

    def predict(self, X):
        check_is_fitted(self, 'is_fitted_')
        X = check_array(X)
        return np.array([self._predict_node(x, self.root) for x in X])
