from sklearn.base import BaseEstimator, ClassifierMixin, RegressorMixin
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
from sklearn.datasets import make_classification, make_regression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error
import numpy as np

class RandomRotationForestBase(BaseEstimator):
    def __init__(self, n_estimators=100, random_state=None):
        self.n_estimators = n_estimators
        self.random_state = random_state
        self.trees = []
        self.rot_matrices = []

    def _rotate_data(self, X, matrix):
        return np.dot(X, matrix)

class RandomRotationForestClassifier(RandomRotationForestBase, ClassifierMixin):
    def fit(self, X, y):
        self.classes_, y = np.unique(y, return_inverse=True)
        self.n_classes_ = len(self.classes_)
        
        rng = np.random.default_rng(self.random_state)
        
        for _ in range(self.n_estimators):
            rot_matrix = rng.normal(size=(X.shape[1], X.shape[1]))
            X_rotated = self._rotate_data(X, rot_matrix)
            
            tree = DecisionTreeClassifier()
            tree.fit(X_rotated, y)
            
            self.trees.append(tree)
            self.rot_matrices.append(rot_matrix)
        
        return self

    def predict_proba(self, X):
        probas = np.zeros((X.shape[0], self.n_classes_))
        
        for tree, rot_matrix in zip(self.trees, self.rot_matrices):
            X_rotated = self._rotate_data(X, rot_matrix)
            probas += tree.predict_proba(X_rotated)
        
        return probas / self.n_estimators

    def predict(self, X):
        probas = self.predict_proba(X)
        return self.classes_[np.argmax(probas, axis=1)]

class RandomRotationForestRegressor(RandomRotationForestBase, RegressorMixin):
    def fit(self, X, y):
        rng = np.random.default_rng(self.random_state)
        
        for _ in range(self.n_estimators):
            rot_matrix = rng.normal(size=(X.shape[1], X.shape[1]))
            X_rotated = self._rotate_data(X, rot_matrix)
            
            tree = DecisionTreeRegressor()
            tree.fit(X_rotated, y)
            
            self.trees.append(tree)
            self.rot_matrices.append(rot_matrix)
        
        return self

    def predict(self, X):
        predictions = np.zeros(X.shape[0])
        
        for tree, rot_matrix in zip(self.trees, self.rot_matrices):
            X_rotated = self._rotate_data(X, rot_matrix)
            predictions += tree.predict(X_rotated)
        
        return predictions / self.n_estimators

